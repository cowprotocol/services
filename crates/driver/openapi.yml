openapi: 3.0.3
info:
  title: Solver API
  description: |
    The API implemented by Solvers to be queried by Autopilot.
  version: 0.0.1
paths:
  /quote:
    post:
      description: Get price estimation quote.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuoteRequest"
      responses:
        200:
          description: Quote successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        429:
          description: The solver cannot keep up. It is too busy to handle more requests.
        500:
          $ref: "#/components/responses/InternalServerError"
  /solve:
    post:
      description: |
        Solve the passed in auction.

        The response contains the objective value of the solution the Solver is able to find but not
        the calldata. This facilitates solvers that work with an RFQ system. When Autopilot decides
        the winner of the of the auction it prompts the corresponding solver to execute its solution
        through the execute endpoint.

        The Solver should respond quickly enough so that the caller of the endpoint receives the
        response within the deadline indicated in the request. This includes taking into account
        network delay.

        Autopilot will call this endpoint at most once for the same auction id and the following
        call will have a larger id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SolveRequest"
      responses:
        200:
          description: Auction successfully solved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolveResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /settle:
    post:
      description: |
        Execute the previously solved auction on chain.

        The auction that should be executed is identified through its id and was recently returned
        by this Solver's solve endpoint.

        By accepting the execute request the Solver promises to execute the solution on chain immediately.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettleRequest"
      responses:
        200:
          description: Execution accepted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettleResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
components:
  schemas:
    Address:
      description: 20 byte Ethereum address encoded as a hex with `0x` prefix.
      type: string
      example: "0x6810e776880c02933d47db1b9fc05908e5386b96"
    TokenAmount:
      description: Amount of an ERC20 token. 256 bit unsigned integer in decimal notation.
      type: string
      example: "1234567890"
    Interaction:
      type: object
      properties:
        target:
          $ref: "#/components/schemas/Address"
        value:
          $ref: "#/components/schemas/TokenAmount"
        calldata:
          description: Hex encoded bytes with `0x` prefix.
          type: string
    Token:
      description: Token information.
      type: object
      properties:
        decimals:
          type: integer
        symbol:
          type: string
        address:
          $ref: "#/components/schemas/Address"
        price:
          allOf:
            - $ref: "#/components/schemas/TokenAmount"
          description: |
            The reference price denominated in native token (i.e. 1e18 represents a token that
            trades one to one with the native token). These prices are used for solution competition
            for computing surplus and converting fees to native token.
        available_balance:
          $ref: "#/components/schemas/TokenAmount"
        trusted:
          type: boolean
    Order:
      description: |
        Order information like what is returned by the Orderbook apis.

        TODO: document all fields
      type: object
      properties:
        uid:
          type: string
        sellToken:
          $ref: "#/components/schemas/Address"
        buyToken:
          $ref: "#/components/schemas/Address"
        sellAmount:
          $ref: "#/components/schemas/TokenAmount"
        buyAmount:
          $ref: "#/components/schemas/TokenAmount"
        solverFee:
          $ref: "#/components/schemas/TokenAmount"
        userFee:
          $ref: "#/components/schemas/TokenAmount"
        validTo:
          type: integer
        kind:
          type: string
          enum: ["buy", "sell"]
        receiver:
          $ref: "#/components/schemas/Address"
        owner:
          $ref: "#/components/schemas/Address"
        partiallyFillable:
          type: boolean
        executed:
          $ref: "#/components/schemas/TokenAmount"
        preInteractions:
          type: array
          items:
            $ref: "#/components/schemas/Interaction"
        postInteractions:
          type: array
          items:
            $ref: "#/components/schemas/Interaction"
        sellTokenBalance:
          type: string
          enum: ["erc20", "internal", "external"]
        buyTokenBalance:
          type: string
          enum: ["erc20", "internal"]
        class:
          type: string
          enum: ["market", "limit", "liquidity"]
        surplusFee:
          allOf:
            - $ref: "#/components/schemas/TokenAmount"
          nullable: true
        appData:
          description: 32 bytes encoded as hex with `0x` prefix.
          type: string
        signingScheme:
          type: string
          enum: ["eip712", "ethsign", "presign", "eip1271"]
        signature:
          description: Hex encoded bytes with `0x` prefix.
          type: string
    BigUint:
      description: A big unsigned integer encoded in decimal.
      type: string
      example: "1234567890"
    OrderUID:
      description: |
        Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix.
        Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address
        and bytes 52..56 valid to,
      type: string
      example: "0x30cff40d9f60caa68a37f0ee73253ad6ad72b45580c945fe3ab67596476937197854163b1b0d24e77dca702b97b5cc33e0f83dcb626122a6"
    QuoteRequest:
      description: Description of what price to estimate.
      type: object
      properties:
        sellToken:
          $ref: "#/components/schemas/Address"
        buyToken:
          $ref: "#/components/schemas/Address"
        kind:
          description: |
            - `buy`: amount is in buy_token, out_amount is in sell_token
            - `sell`: amount is in sell_token, out_amount is in buy_token
          type: string
          enum: ["buy", "sell"]
        amount:
          $ref: "#/components/schemas/TokenAmount"
    QuoteResponse:
      oneOf:
        - description: |
            Successful Quote

            The Solver knows how to fill the request with these parameters.

            If the request was of type `buy` then the response's buy amount has the same value as the
            request's amount and the sell amount was filled in by the server. Vice versa for type
            `sell`.
          type: object
          properties:
            amount:
              $ref: "#/components/schemas/TokenAmount"
            interactions:
              type: array
              items:
                $ref: "#/components/schemas/Interaction"
        - $ref: "#/components/schemas/Error"
    SolveRequest:
      description: Request to the solve endpoint.
      type: object
      properties:
        id:
          type: integer
          description: |
            The unique identifier of the auction.
        block:
          type: integer
          description: |
            The block number at which the auction was created.
        orders:
          type: array
          items:
            $ref: "#/components/schemas/Order"
          description: |
            The solvable orders included in the auction.
        tokens:
          type: array
          items:
            $ref: "#/components/schemas/Token"
          description: |
            Information about tokens used in the auction.
        deadline:
          description: |
            The time until which the caller expects a response.

            Encoded as ISO 8601 UTC.
          type: string
          example: "2020-12-03T18:35:18.814523Z"
    SolveResponse:
      description: |
        Response of the solve endpoint.

        A score of 0 indicates the empty solution, which is never executed.
      type: object
      properties:
        score:
          description: |
            The objective value of the solution.
          type: number
        signature:
          description: |
            Signature confirming that the Solver promised to have this solution for this auction.

            TODO: Decide what is signed and how it is signed.
          type: string
    SettleRequest:
      description: Request to the execute endpoint.
      type: object
      properties:
        auctionId:
          description: Id of the auction that should be executed.
          type: integer
        transactionIdentifier:
          description: |
            Extra calldata that is appended to the settlement contract invocation by the Solver to
            identify the transaction.

            Hex encoded bytes. No fixed length.
          type: string
          example: "0x00112233"
    SettleResponse:
      description: Response of the execute endpoint.
      type: object
      properties:
        clearingPrices:
          description: |
            Mapping of hex token address to price.

            The prices of tokens for settled user orders as passed to the settlement contract.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/BigUint"
        trades:
          description: executed orders
          type: array
          items:
            type: object
            properties:
              uid:
                $ref: "#/components/schemas/OrderUID"
              executedAmount:
                $ref: "#/components/schemas/TokenAmount"
        internalizedInteractions:
          type: array
          items:
            type: object
            description: |
              An internalized interaction is an interaction that could have executed on chain but
              was instead handled through the settlement contract's buffers to save gas. The
              information included here allows reconstructing the interaction so that it can be
              checked for validity.
            properties:
              calldata:
                description: hex encoded
                type: string
                example: "0x01"
              inputs:
                description: Mapping of hex token address to amount.
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/TokenAmount"
              outputs:
                description: Mapping of token address to amount.
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/TokenAmount"
        calldata:
          description: hex encoded
          type: string
          example: "0x01"
        signature:
          description: |
            Signature confirming that the Solver promised to execute this auction.

            TODO: Decide what is signed and how it is signed.
          type: string
    Error:
      description: Response on API errors.
      type: object
      properties:
        kind:
          description: The kind of error.
          type: string
        description:
          description: Text describing the error.
          type: string
  responses:
    BadRequest:
      description: |
        There is something wrong with the request.

        Body potentially contains extra information.
      content:
        text/plain:
          schema:
            type: string
    InternalServerError:
      description: |
        Something went wrong when handling the request.

        Body potentially contains extra information.
      content:
        text/plain:
          schema:
            type: string
