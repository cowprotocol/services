{"abi":[{"type":"function","name":"approve","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"target","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"flashLoanAndSettle","inputs":[{"name":"lender","type":"address","internalType":"address"},{"name":"loan","type":"tuple","internalType":"struct IFlashLoanSolverWrapper.LoanRequest","components":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"}]},{"name":"settlement","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"settlementAuthentication","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract ICowAuthentication"}],"stateMutability":"nonpayable"},{"type":"function","name":"settlementContract","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract ICowSettlement"}],"stateMutability":"nonpayable"}],"bytecode":"0x","deployedBytecode":"0x","methodIdentifiers":{"approve(address,address,uint256)":"e1f21c67","flashLoanAndSettle(address,(address,uint256),bytes)":"f24cc7eb","settlementAuthentication()":"02ebcbea","settlementContract()":"ea42418b"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IFlashLoanSolverWrapper.LoanRequest\",\"name\":\"loan\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"settlement\",\"type\":\"bytes\"}],\"name\":\"flashLoanAndSettle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementAuthentication\",\"outputs\":[{\"internalType\":\"contract ICowAuthentication\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementContract\",\"outputs\":[{\"internalType\":\"contract ICowSettlement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"CoW DAO developers\",\"kind\":\"dev\",\"methods\":{\"approve(address,address,uint256)\":{\"details\":\"In general, the only way to transfer funds out of this contract is through a call to this function and a subsequent call to `transferFrom`. The allowance will be preserved across different transactions.\",\"params\":{\"amount\":\"The amount of tokens to set as the allowance.\",\"target\":\"The address that will be allowed to spend the token.\",\"token\":\"The token to approve for transferring.\"}},\"flashLoanAndSettle(address,(address,uint256),bytes)\":{\"details\":\"The repayment of a flash loan is different based on the protocol. For example, some expect to retrieve the funds from this borrower contract through `transferFrom`, while other check the lender balance is as expected after the flash loan has been processed. The executed settlement must be built to cater to the needs of the specified lender.A settlement can be executed at most once in a call. The settlement data cannot change during execution. Only the settle function can be called. All of this is also the case if the lender is untrusted.\",\"params\":{\"lender\":\"The address of the flash-loan lender from which to borrow.\",\"loan\":\"The parameters describing the requested loan.\",\"settlement\":\"The call data for a call to the `settle()` function in the CoW Protocol settlement contract. It fully describes a CoW Protocol settlement.\"}}},\"title\":\"Flash-Loan Solver Wrapper Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,address,uint256)\":{\"notice\":\"Approves the target address to spend the specified token on behalf of the flash-loan solver wrapper up to the specified amount.\"},\"flashLoanAndSettle(address,(address,uint256),bytes)\":{\"notice\":\"Requests a flash loan with the specified parameters from the lender and, once the funds have been received, executes the settlement specified as part of the call. The flash-loan repayment is expected to take place during the settlement.\"},\"settlementAuthentication()\":{\"notice\":\"The contract responsible to determine which address is an authorized solver for CoW Protocol.\"},\"settlementContract()\":{\"notice\":\"The settlement contract that will be called when a settlement is executed after a flash loan.\"}},\"notice\":\"A flash-loan solver wrapper is a solver contract for CoW Protocol that calls a flash-loan lender before executing a settlement to retrieve the funds needed during the settlement execution. A concrete implementation generally awaits for a callback from the lender and executes the settlement in that callback. This interface is implemented by all flash-loan solver we implement, regardless of the concrete mechanism used by the underlying lender.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interface/IFlashLoanSolverWrapper.sol\":\"IFlashLoanSolverWrapper\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/interface/ICowSettlement.sol\":{\"keccak256\":\"0x936d8038ce833e625c7c306b5890ba85c4e5bf8adc8b7e41227a680c4039e244\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://138b144cac2d5cd0b3bbd4b0f73817b1e611d90854734f64b98b15e709aa7b5e\",\"dweb:/ipfs/Qmf6rcxHBToX7Ym7zHXP8BRaWwD7DLptuZqYq3YDcd7jvJ\"]},\"src/interface/IFlashLoanSolverWrapper.sol\":{\"keccak256\":\"0x28d637bc299e016ffd0ed3e1b0d2a6c57887a1dd95d91355e4de81c5e733e844\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0812acca6ee68fef89d5091ce838c214e1d6da29ea15d1bb611929907c65e378\",\"dweb:/ipfs/QmSwKuoMKWjK8dbJnmagQ2u5nqYwwfFsBFaDNQiQyy5GS1\"]},\"src/vendored/ICowAuthentication.sol\":{\"keccak256\":\"0xc0b8ec08ce1e4ed2af4188ab08281b1a894d74b2dc69e045398e789f5a72d140\",\"license\":\"LGPL-3.0-or-later\",\"urls\":[\"bzz-raw://41917d1ba4f6846ddd52d7fe16189a14a836d62b255e3ad07ebbd46f33cdbfa4\",\"dweb:/ipfs/QmXTzjA9qoNX3aHehLJqMyx7qpZKitPE1Un3buB5QtKqfq\"]},\"src/vendored/IERC20.sol\":{\"keccak256\":\"0x1b72641f69f5a2156fc2319a6b08daa0c4b5b224d0a776b85a5fcae428af72c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://261d26fbf99877e2d4b5a7e6b2b2defee5ba5cab5bfdfab231fb5f2e2dfb1fdb\",\"dweb:/ipfs/QmSpQuVkTHXzH1CNWmgtnCLz9CNEMD5g5sciiXRkrbYUJt\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"approve"},{"inputs":[{"internalType":"address","name":"lender","type":"address"},{"internalType":"struct IFlashLoanSolverWrapper.LoanRequest","name":"loan","type":"tuple","components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}]},{"internalType":"bytes","name":"settlement","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"flashLoanAndSettle"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"settlementAuthentication","outputs":[{"internalType":"contract ICowAuthentication","name":"","type":"address"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"settlementContract","outputs":[{"internalType":"contract ICowSettlement","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"approve(address,address,uint256)":{"details":"In general, the only way to transfer funds out of this contract is through a call to this function and a subsequent call to `transferFrom`. The allowance will be preserved across different transactions.","params":{"amount":"The amount of tokens to set as the allowance.","target":"The address that will be allowed to spend the token.","token":"The token to approve for transferring."}},"flashLoanAndSettle(address,(address,uint256),bytes)":{"details":"The repayment of a flash loan is different based on the protocol. For example, some expect to retrieve the funds from this borrower contract through `transferFrom`, while other check the lender balance is as expected after the flash loan has been processed. The executed settlement must be built to cater to the needs of the specified lender.A settlement can be executed at most once in a call. The settlement data cannot change during execution. Only the settle function can be called. All of this is also the case if the lender is untrusted.","params":{"lender":"The address of the flash-loan lender from which to borrow.","loan":"The parameters describing the requested loan.","settlement":"The call data for a call to the `settle()` function in the CoW Protocol settlement contract. It fully describes a CoW Protocol settlement."}}},"version":1},"userdoc":{"kind":"user","methods":{"approve(address,address,uint256)":{"notice":"Approves the target address to spend the specified token on behalf of the flash-loan solver wrapper up to the specified amount."},"flashLoanAndSettle(address,(address,uint256),bytes)":{"notice":"Requests a flash loan with the specified parameters from the lender and, once the funds have been received, executes the settlement specified as part of the call. The flash-loan repayment is expected to take place during the settlement."},"settlementAuthentication()":{"notice":"The contract responsible to determine which address is an authorized solver for CoW Protocol."},"settlementContract()":{"notice":"The settlement contract that will be called when a settlement is executed after a flash loan."}},"version":1}},"settings":{"remappings":["forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":1000000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interface/IFlashLoanSolverWrapper.sol":"IFlashLoanSolverWrapper"},"evmVersion":"cancun","libraries":{}},"sources":{"src/interface/ICowSettlement.sol":{"keccak256":"0x936d8038ce833e625c7c306b5890ba85c4e5bf8adc8b7e41227a680c4039e244","urls":["bzz-raw://138b144cac2d5cd0b3bbd4b0f73817b1e611d90854734f64b98b15e709aa7b5e","dweb:/ipfs/Qmf6rcxHBToX7Ym7zHXP8BRaWwD7DLptuZqYq3YDcd7jvJ"],"license":"GPL-3.0-or-later"},"src/interface/IFlashLoanSolverWrapper.sol":{"keccak256":"0x28d637bc299e016ffd0ed3e1b0d2a6c57887a1dd95d91355e4de81c5e733e844","urls":["bzz-raw://0812acca6ee68fef89d5091ce838c214e1d6da29ea15d1bb611929907c65e378","dweb:/ipfs/QmSwKuoMKWjK8dbJnmagQ2u5nqYwwfFsBFaDNQiQyy5GS1"],"license":"GPL-3.0-or-later"},"src/vendored/ICowAuthentication.sol":{"keccak256":"0xc0b8ec08ce1e4ed2af4188ab08281b1a894d74b2dc69e045398e789f5a72d140","urls":["bzz-raw://41917d1ba4f6846ddd52d7fe16189a14a836d62b255e3ad07ebbd46f33cdbfa4","dweb:/ipfs/QmXTzjA9qoNX3aHehLJqMyx7qpZKitPE1Un3buB5QtKqfq"],"license":"LGPL-3.0-or-later"},"src/vendored/IERC20.sol":{"keccak256":"0x1b72641f69f5a2156fc2319a6b08daa0c4b5b224d0a776b85a5fcae428af72c2","urls":["bzz-raw://261d26fbf99877e2d4b5a7e6b2b2defee5ba5cab5bfdfab231fb5f2e2dfb1fdb","dweb:/ipfs/QmSpQuVkTHXzH1CNWmgtnCLz9CNEMD5g5sciiXRkrbYUJt"],"license":"MIT"}},"version":1},"id":28}