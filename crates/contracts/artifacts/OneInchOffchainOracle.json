{"abi":[{"inputs":[{"internalType":"contract MultiWrapper","name":"_multiWrapper","type":"address"},{"internalType":"contract IOracle[]","name":"existingOracles","type":"address[]"},{"internalType":"enum OffchainOracle.OracleType[]","name":"oracleTypes","type":"uint8[]"},{"internalType":"contract IERC20[]","name":"existingConnectors","type":"address[]"},{"internalType":"contract IERC20","name":"wBase","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ArraysLengthMismatch","type":"error"},{"inputs":[],"name":"ConnectorAlreadyAdded","type":"error"},{"inputs":[],"name":"InvalidOracleTokenKind","type":"error"},{"inputs":[],"name":"OracleAlreadyAdded","type":"error"},{"inputs":[],"name":"SameTokens","type":"error"},{"inputs":[],"name":"TooBigThreshold","type":"error"},{"inputs":[],"name":"UnknownConnector","type":"error"},{"inputs":[],"name":"UnknownOracle","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract IERC20","name":"connector","type":"address"}],"name":"ConnectorAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract IERC20","name":"connector","type":"address"}],"name":"ConnectorRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract MultiWrapper","name":"multiWrapper","type":"address"}],"name":"MultiWrapperUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract IOracle","name":"oracle","type":"address"},{"indexed":false,"internalType":"enum OffchainOracle.OracleType","name":"oracleType","type":"uint8"}],"name":"OracleAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract IOracle","name":"oracle","type":"address"},{"indexed":false,"internalType":"enum OffchainOracle.OracleType","name":"oracleType","type":"uint8"}],"name":"OracleRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"contract IERC20","name":"connector","type":"address"}],"name":"addConnector","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IOracle","name":"oracle","type":"address"},{"internalType":"enum OffchainOracle.OracleType","name":"oracleKind","type":"uint8"}],"name":"addOracle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"connectors","outputs":[{"internalType":"contract IERC20[]","name":"allConnectors","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"srcToken","type":"address"},{"internalType":"contract IERC20","name":"dstToken","type":"address"},{"internalType":"bool","name":"useWrappers","type":"bool"}],"name":"getRate","outputs":[{"internalType":"uint256","name":"weightedRate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"srcToken","type":"address"},{"internalType":"bool","name":"useSrcWrappers","type":"bool"}],"name":"getRateToEth","outputs":[{"internalType":"uint256","name":"weightedRate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"srcToken","type":"address"},{"internalType":"bool","name":"useSrcWrappers","type":"bool"},{"internalType":"contract IERC20[]","name":"customConnectors","type":"address[]"},{"internalType":"uint256","name":"thresholdFilter","type":"uint256"}],"name":"getRateToEthWithCustomConnectors","outputs":[{"internalType":"uint256","name":"weightedRate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"srcToken","type":"address"},{"internalType":"bool","name":"useSrcWrappers","type":"bool"},{"internalType":"uint256","name":"thresholdFilter","type":"uint256"}],"name":"getRateToEthWithThreshold","outputs":[{"internalType":"uint256","name":"weightedRate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"srcToken","type":"address"},{"internalType":"contract IERC20","name":"dstToken","type":"address"},{"internalType":"bool","name":"useWrappers","type":"bool"},{"internalType":"contract IERC20[]","name":"customConnectors","type":"address[]"},{"internalType":"uint256","name":"thresholdFilter","type":"uint256"}],"name":"getRateWithCustomConnectors","outputs":[{"internalType":"uint256","name":"weightedRate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"srcToken","type":"address"},{"internalType":"contract IERC20","name":"dstToken","type":"address"},{"internalType":"bool","name":"useWrappers","type":"bool"},{"internalType":"uint256","name":"thresholdFilter","type":"uint256"}],"name":"getRateWithThreshold","outputs":[{"internalType":"uint256","name":"weightedRate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"multiWrapper","outputs":[{"internalType":"contract MultiWrapper","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oracles","outputs":[{"internalType":"contract IOracle[]","name":"allOracles","type":"address[]"},{"internalType":"enum OffchainOracle.OracleType[]","name":"oracleTypes","type":"uint8[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"connector","type":"address"}],"name":"removeConnector","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IOracle","name":"oracle","type":"address"},{"internalType":"enum OffchainOracle.OracleType","name":"oracleKind","type":"uint8"}],"name":"removeOracle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract MultiWrapper","name":"_multiWrapper","type":"address"}],"name":"setMultiWrapper","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"addConnector(address)":{"params":{"connector":"The address of the new connector to add"}},"addOracle(address,uint8)":{"params":{"oracle":"The address of the new oracle to add","oracleKind":"The type of the new oracle"}},"connectors()":{"returns":{"allConnectors":"An array of all registered connectors"}},"getRate(address,address,bool)":{"params":{"dstToken":"The destination token","srcToken":"The source token","useWrappers":"Boolean flag to use or not use token wrappers"},"returns":{"weightedRate":"weighted rate between the two tokens"}},"getRateWithCustomConnectors(address,address,bool,address[],uint256)":{"params":{"customConnectors":"An array of custom connectors to use","dstToken":"The destination token","srcToken":"The source token","thresholdFilter":"The threshold percentage (from 0 to 100) used to filter out rates below the threshold","useWrappers":"Boolean flag to use or not use token wrappers"},"returns":{"weightedRate":"The weighted rate between the two tokens"}},"getRateWithThreshold(address,address,bool,uint256)":{"params":{"dstToken":"The destination token","srcToken":"The source token","thresholdFilter":"The threshold percentage (from 0 to 100) used to filter out rates below the threshold","useWrappers":"Boolean flag to use or not use token wrappers"},"returns":{"weightedRate":"weighted rate between the two tokens"}},"oracles()":{"returns":{"allOracles":"An array of all registered oracles","oracleTypes":"An array of the corresponding types for each oracle"}},"owner()":{"details":"Returns the address of the current owner."},"removeConnector(address)":{"params":{"connector":"The address of the connector to remove"}},"removeOracle(address,uint8)":{"params":{"oracle":"The address of the oracle to remove","oracleKind":"The type of the oracle to remove"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setMultiWrapper(address)":{"params":{"_multiWrapper":"The address of the MultiWrapper contract"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{"addConnector(address)":{"notice":"Adds a new connector to the registry."},"addOracle(address,uint8)":{"notice":"Adds a new oracle to the registry with the given oracle type."},"connectors()":{"notice":"Returns an array of all registered connectors."},"getRate(address,address,bool)":{"notice":"WARNING!    Usage of the dex oracle on chain is highly discouraged!    getRate function can be easily manipulated inside transaction!Returns the weighted rate between two tokens using default connectors, with the option to filter out rates below a certain threshold."},"getRateToEth(address,bool)":{"notice":"WARNING!    Usage of the dex oracle on chain is highly discouraged!    getRate function can be easily manipulated inside transaction!The same as `getRate` but checks against `ETH` and `WETH` only"},"getRateToEthWithCustomConnectors(address,bool,address[],uint256)":{"notice":"WARNING!    Usage of the dex oracle on chain is highly discouraged!    getRate function can be easily manipulated inside transaction!The same as `getRateWithCustomConnectors` but checks against `ETH` and `WETH` only"},"getRateToEthWithThreshold(address,bool,uint256)":{"notice":"WARNING!    Usage of the dex oracle on chain is highly discouraged!    getRate function can be easily manipulated inside transaction!The same as `getRate` but checks against `ETH` and `WETH` only"},"getRateWithCustomConnectors(address,address,bool,address[],uint256)":{"notice":"WARNING!    Usage of the dex oracle on chain is highly discouraged!    getRate function can be easily manipulated inside transaction!Returns the weighted rate between two tokens using custom connectors, with the option to filter out rates below a certain threshold."},"getRateWithThreshold(address,address,bool,uint256)":{"notice":"WARNING!    Usage of the dex oracle on chain is highly discouraged!    getRate function can be easily manipulated inside transaction!Returns the weighted rate between two tokens using default connectors, with the option to filter out rates below a certain threshold."},"oracles()":{"notice":"Returns all registered oracles along with their corresponding oracle types."},"removeConnector(address)":{"notice":"Removes a connector from the registry."},"removeOracle(address,uint8)":{"notice":"Removes an oracle from the registry with the given oracle type."},"setMultiWrapper(address)":{"notice":"Sets the MultiWrapper contract address."}},"version":1}}