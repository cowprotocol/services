//! Solvers propose solutions to an [`crate::domain::Auction`].
//!
//! A winning solution becomes a [`Settlement`] once it is executed on-chain in
//! a form of settlement transaction.

use {
    crate::{
        domain::{self, eth},
        infra,
    },
    std::collections::HashMap,
};

mod auction;
mod observer;
mod trade;
mod transaction;
use chain::Chain;
pub use {auction::Auction, observer::Observer, trade::Trade, transaction::Transaction};

/// A settled transaction together with the `Auction`, for which it was executed
/// on-chain.
///
/// Referenced as a [`Settlement`] in the codebase.
#[allow(dead_code)]
#[derive(Debug)]
pub struct Settlement {
    /// The gas used by the settlement transaction.
    gas: eth::Gas,
    /// The effective gas price of the settlement transaction.
    gas_price: eth::EffectiveGasPrice,
    /// The address of the solver that submitted the settlement transaction.
    solver: eth::Address,
    /// The block number of the block that contains the settlement transaction.
    block: eth::BlockNo,
    /// The associated auction.
    auction: Auction,
    /// Trades that were settled by the transaction.
    trades: Vec<Trade>,
}

impl Settlement {
    /// The gas used by the settlement.
    pub fn gas(&self) -> eth::Gas {
        self.gas
    }

    /// The effective gas price at the time of settlement.
    pub fn gas_price(&self) -> eth::EffectiveGasPrice {
        self.gas_price
    }

    /// Total surplus for all trades in the settlement.
    pub fn surplus_in_ether(&self) -> eth::Ether {
        self.trades
            .iter()
            .map(|trade| {
                trade
                    .surplus_in_ether(&self.auction.prices)
                    .unwrap_or_else(|err| {
                        tracing::warn!(
                            ?err,
                            trade = %trade.uid(),
                            "possible incomplete surplus calculation",
                        );
                        num::zero()
                    })
            })
            .sum()
    }

    /// Total fee taken for all the trades in the settlement.
    pub fn fee_in_ether(&self) -> eth::Ether {
        self.trades
            .iter()
            .map(|trade| {
                trade
                    .fee_in_ether(&self.auction.prices)
                    .unwrap_or_else(|err| {
                        tracing::warn!(
                            ?err,
                            trade = %trade.uid(),
                            "possible incomplete fee calculation",
                        );
                        num::zero()
                    })
            })
            .sum()
    }

    /// Per order fees breakdown. Contains all orders from the settlement
    pub fn fee_breakdown(&self) -> HashMap<domain::OrderUid, trade::FeeBreakdown> {
        self.trades
            .iter()
            .map(|trade| {
                let fee_breakdown = trade.fee_breakdown(&self.auction).unwrap_or_else(|err| {
                    tracing::warn!(
                        ?err,
                        trade = %trade.uid(),
                        "possible incomplete fee breakdown calculation",
                    );
                    trade::FeeBreakdown {
                        total: eth::Asset {
                            // TODO surplus token
                            token: trade.sell_token(),
                            amount: num::zero(),
                        },
                        protocol: vec![],
                    }
                });
                (*trade.uid(), fee_breakdown)
            })
            .collect()
    }

    /// Return all trades that are classified as Just-In-Time (JIT) orders.
    pub fn jit_orders(&self) -> Vec<&trade::Jit> {
        self.trades
            .iter()
            .filter_map(|trade| trade.as_jit())
            .collect()
    }

    pub async fn new(
        settled: Transaction,
        persistence: &infra::Persistence,
        chain: &Chain,
    ) -> Result<Self, Error> {
        let auction = persistence.get_auction(settled.auction_id).await?;

        if settled.block > auction.block + max_settlement_age(chain) {
            // A settled transaction references a VERY old auction.
            //
            // A hacky way to detect processing of production settlements in the staging
            // environment, as production is lagging with auction ids by ~270 days on
            // Ethereum mainnet.
            //
            // TODO: remove once https://github.com/cowprotocol/services/issues/2848 is resolved and ~270 days are passed since bumping.
            return Err(Error::WrongEnvironment);
        }

        let trades = settled
            .trades
            .into_iter()
            .map(|trade| Trade::new(trade, &auction, settled.timestamp))
            .collect();

        Ok(Self {
            solver: settled.solver,
            block: settled.block,
            gas: settled.gas,
            gas_price: settled.gas_price,
            trades,
            auction,
        })
    }
}

/// How old (in terms of blocks) a settlement should be, to be considered as a
/// settlement from another environment.
///
/// Currently set to ~6h
fn max_settlement_age(chain: &Chain) -> u64 {
    const TARGET_AGE: u64 = 6 * 60 * 60 * 1000; // 6h in ms
    chain.blocks_in(TARGET_AGE).round() as u64
}

#[derive(Debug, thiserror::Error)]
pub enum Error {
    #[error("failed communication with the database: {0}")]
    Infra(anyhow::Error),
    #[error("failed to prepare the data fetched from database for domain: {0}")]
    InconsistentData(InconsistentData),
    #[error("settlement refers to an auction from a different environment")]
    WrongEnvironment,
}

/// Errors that can occur when fetching data from the persistence layer.
///
/// These errors cover missing data, conversion of data into domain objects etc.
///
/// This is a separate enum to allow for more specific error handling.
#[derive(Debug, thiserror::Error)]
pub enum InconsistentData {
    #[error("auction not found in the persistence layer")]
    AuctionNotFound,
    #[error("invalid fee policy fetched from persistence layer: {0} for order: {1}")]
    InvalidFeePolicy(infra::persistence::dto::fee_policy::Error, domain::OrderUid),
    #[error("invalid fetched price from persistence layer for token: {0:?}")]
    InvalidPrice(eth::TokenAddress),
}

impl From<infra::persistence::error::Auction> for Error {
    fn from(err: infra::persistence::error::Auction) -> Self {
        match err {
            infra::persistence::error::Auction::DatabaseError(err) => Self::Infra(err.into()),
            infra::persistence::error::Auction::NotFound => {
                Self::InconsistentData(InconsistentData::AuctionNotFound)
            }
            infra::persistence::error::Auction::InvalidFeePolicy(err, order) => {
                Self::InconsistentData(InconsistentData::InvalidFeePolicy(err, order))
            }
            infra::persistence::error::Auction::InvalidPrice(token) => {
                Self::InconsistentData(InconsistentData::InvalidPrice(token))
            }
        }
    }
}

impl From<infra::persistence::DatabaseError> for Error {
    fn from(err: infra::persistence::DatabaseError) -> Self {
        Self::Infra(err.0)
    }
}

#[cfg(test)]
mod tests {
    use {
        crate::{
            domain,
            domain::{auction, eth},
        },
        hex_literal::hex,
        std::collections::{HashMap, HashSet},
    };

    // https://etherscan.io/tx/0xc48dc0d43ffb43891d8c3ad7bcf05f11465518a2610869b20b0b4ccb61497634
    #[test]
    fn settlement() {
        let calldata = hex!(
            "
        13d79a0b
        0000000000000000000000000000000000000000000000000000000000000080
        0000000000000000000000000000000000000000000000000000000000000120
        00000000000000000000000000000000000000000000000000000000000001c0
        00000000000000000000000000000000000000000000000000000000000003c0
        0000000000000000000000000000000000000000000000000000000000000004
        000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
        000000000000000000000000c52fafdc900cb92ae01e6e4f8979af7f436e2eb2
        000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
        000000000000000000000000c52fafdc900cb92ae01e6e4f8979af7f436e2eb2
        0000000000000000000000000000000000000000000000000000000000000004
        0000000000000000000000000000000000000000000000010000000000000000
        0000000000000000000000000000000000000000000000000023f003f04b5a92
        0000000000000000000000000000000000000000000000f676b2510588839eb6
        00000000000000000000000000000000000000000000000022b1c8c1227a0000
        0000000000000000000000000000000000000000000000000000000000000001
        0000000000000000000000000000000000000000000000000000000000000020
        0000000000000000000000000000000000000000000000000000000000000002
        0000000000000000000000000000000000000000000000000000000000000003
        0000000000000000000000009398a8948e1ac88432a509b218f9ac8cf9cecdee
        00000000000000000000000000000000000000000000000022b1c8c1227a0000
        0000000000000000000000000000000000000000000000f11f89f17728c24a5c
        00000000000000000000000000000000000000000000000000000000ffffffff
        ae848d463143d030dd3875930a875de6417f58adc5dde0e94d485706d34b4797
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000040
        00000000000000000000000000000000000000000000000022b1c8c1227a0000
        0000000000000000000000000000000000000000000000000000000000000160
        0000000000000000000000000000000000000000000000000000000000000028
        40a50cf069e992aa4536211b23f286ef8875218740a50cf069e992aa4536211b
        23f286ef88752187000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000140
        00000000000000000000000000000000000000000000000000000000000004c0
        0000000000000000000000000000000000000000000000000000000000000001
        0000000000000000000000000000000000000000000000000000000000000020
        00000000000000000000000040a50cf069e992aa4536211b23f286ef88752187
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000004
        4c84c1c800000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000003
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000140
        0000000000000000000000000000000000000000000000000000000000000220
        00000000000000000000000000000000be48a3000b818e9615d85aacfed4ca97
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        000000000000000000000000000000000000000000000000000000000000004f
        0000000101010000000000000000063a508037887d5d5aca4b69771e56f3c92c
        20840dd09188a65771d8000000000000002c400000000000000001c02aaa39b2
        23fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000
        000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000044
        a9059cbb000000000000000000000000c88deb1ce0bc4a4306b7f20be2abd28a
        d3a5c8d10000000000000000000000000000000000000000000000001c5efcf2
        c41873fd00000000000000000000000000000000000000000000000000000000
        000000000000000000000000c88deb1ce0bc4a4306b7f20be2abd28ad3a5c8d1
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        00000000000000000000000000000000000000000000000000000000000000a4
        022c0d9f00000000000000000000000000000000000000000000000000000000
        000000000000000000000000000000000000000000000000000000ca2b0dae6c
        b90dbc4b0000000000000000000000009008d19f58aabd9ed0d60971565aa851
        0560ab4100000000000000000000000000000000000000000000000000000000
        0000008000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        000000000084120c"
        )
        .to_vec();

        let domain_separator = eth::DomainSeparator(hex!(
            "c078f884a2676e1345748b1feace7b0abee5d00ecadb6e574dcdd109a63e8943"
        ));
        let transaction = super::transaction::Transaction::new(
            &domain::eth::Transaction {
                input: calldata.into(),
                ..Default::default()
            },
            &domain_separator,
        )
        .unwrap();

        let order_uid = transaction.trades[0].uid;

        let auction = super::Auction {
            block: eth::BlockNo(0),
            // prices read from https://solver-instances.s3.eu-central-1.amazonaws.com/prod/mainnet/legacy/8655372.json
            prices: auction::Prices::from([
                (
                    eth::TokenAddress(eth::H160::from_slice(&hex!(
                        "c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                    ))),
                    auction::Price::try_new(eth::U256::from(1000000000000000000u128).into())
                        .unwrap(),
                ),
                (
                    eth::TokenAddress(eth::H160::from_slice(&hex!(
                        "c52fafdc900cb92ae01e6e4f8979af7f436e2eb2"
                    ))),
                    auction::Price::try_new(eth::U256::from(537359915436704u128).into()).unwrap(),
                ),
            ]),
            surplus_capturing_jit_order_owners: Default::default(),
            id: 0,
            orders: HashMap::from([(order_uid, vec![])]),
        };

        let trade = super::trade::Trade::new(transaction.trades[0].clone(), &auction, 0);

        // surplus (score) read from https://api.cow.fi/mainnet/api/v1/solver_competition/by_tx_hash/0xc48dc0d43ffb43891d8c3ad7bcf05f11465518a2610869b20b0b4ccb61497634
        assert_eq!(
            trade.surplus_in_ether(&auction.prices).unwrap().0,
            eth::U256::from(52937525819789126u128)
        );
        // fee read from "executedFee" https://api.cow.fi/mainnet/api/v1/orders/0x10dab31217bb6cc2ace0fe601c15d342f7626a1ee5ef0495449800e73156998740a50cf069e992aa4536211b23f286ef88752187ffffffff
        // but not equal to 6890975030480504 anymore, since after this tx we switched to
        // convert the fee from surplus token directly to ether
        assert_eq!(
            trade.fee_in_ether(&auction.prices).unwrap().0,
            eth::U256::from(6752697350740628u128)
        );
    }

    // https://etherscan.io/tx/0x688508eb59bd20dc8c0d7c0c0b01200865822c889f0fcef10113e28202783243
    #[test]
    fn settlement_with_protocol_fee() {
        let calldata = hex!(
            "
        13d79a0b
        0000000000000000000000000000000000000000000000000000000000000080
        0000000000000000000000000000000000000000000000000000000000000120
        00000000000000000000000000000000000000000000000000000000000001c0
        00000000000000000000000000000000000000000000000000000000000003e0
        0000000000000000000000000000000000000000000000000000000000000004
        000000000000000000000000056fd409e1d7a124bd7017459dfea2f387b6d5cd
        000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7
        000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7
        000000000000000000000000056fd409e1d7a124bd7017459dfea2f387b6d5cd
        0000000000000000000000000000000000000000000000000000000000000004
        00000000000000000000000000000000000000000000000000000019b743b945
        0000000000000000000000000000000000000000000000000000000000a87cf3
        0000000000000000000000000000000000000000000000000000000000a87c7c
        00000000000000000000000000000000000000000000000000000019b8b69873
        0000000000000000000000000000000000000000000000000000000000000001
        0000000000000000000000000000000000000000000000000000000000000020
        0000000000000000000000000000000000000000000000000000000000000002
        0000000000000000000000000000000000000000000000000000000000000003
        000000000000000000000000f87da2093abee9b13a6f89671e4c3a3f80b42767
        0000000000000000000000000000000000000000000000000000006d6e2edc00
        0000000000000000000000000000000000000000000000000000000002cccdff
        000000000000000000000000000000000000000000000000000000006799c219
        2d365e5affcfa62cf1067b845add9c01bedcb2fc5d7a37442d2177262af26a0c
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000002
        00000000000000000000000000000000000000000000000000000019b8b69873
        0000000000000000000000000000000000000000000000000000000000000160
        0000000000000000000000000000000000000000000000000000000000000041
        e2ef661343676f9f4371ce809f728bb39a406f47835ee2b0104a8a1f340409ae
        742dfe47fe469c024dc2fb7f80b99878b35985d66312856a8b5dcf5de4b069ee
        1c00000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000080
        0000000000000000000000000000000000000000000000000000000000000520
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000003
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000140
        00000000000000000000000000000000000000000000000000000000000002e0
        000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000044
        095ea7b3000000000000000000000000e592427a0aece92de3edee1f18e0157c
        05861564ffffffffffffffffffffffffffffffffffffffffffffffffffffffff
        ffffffff00000000000000000000000000000000000000000000000000000000
        000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000104
        db3e2198000000000000000000000000dac17f958d2ee523a2206206994597c1
        3d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce
        3606eb4800000000000000000000000000000000000000000000000000000000
        000001f40000000000000000000000009008d19f58aabd9ed0d60971565aa851
        0560ab4100000000000000000000000000000000000000000000000000000000
        66abb94e00000000000000000000000000000000000000000000000000000019
        b4b64b9b00000000000000000000000000000000000000000000000000000019
        bdd90a1800000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000104
        db3e2198000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce
        3606eb48000000000000000000000000056fd409e1d7a124bd7017459dfea2f3
        87b6d5cd00000000000000000000000000000000000000000000000000000000
        000001f40000000000000000000000009008d19f58aabd9ed0d60971565aa851
        0560ab4100000000000000000000000000000000000000000000000000000000
        66abb94e00000000000000000000000000000000000000000000000000000000
        00a87cf300000000000000000000000000000000000000000000000000000019
        bb4af52700000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        00000000008c912c"
        )
        .to_vec();

        let domain_separator = eth::DomainSeparator(hex!(
            "c078f884a2676e1345748b1feace7b0abee5d00ecadb6e574dcdd109a63e8943"
        ));
        let transaction = super::transaction::Transaction::new(
            &domain::eth::Transaction {
                input: calldata.into(),
                ..Default::default()
            },
            &domain_separator,
        )
        .unwrap();

        let prices: auction::Prices = From::from([
            (
                eth::TokenAddress(eth::H160::from_slice(&hex!(
                    "dac17f958d2ee523a2206206994597c13d831ec7"
                ))),
                auction::Price::try_new(eth::U256::from(321341140475275961528483840u128).into())
                    .unwrap(),
            ),
            (
                eth::TokenAddress(eth::H160::from_slice(&hex!(
                    "056fd409e1d7a124bd7017459dfea2f387b6d5cd"
                ))),
                auction::Price::try_new(
                    eth::U256::from(3177764302250520038326415654912u128).into(),
                )
                .unwrap(),
            ),
        ]);

        let order_uid = transaction.trades[0].uid;
        let auction = super::Auction {
            block: eth::BlockNo(0),
            prices,
            surplus_capturing_jit_order_owners: Default::default(),
            id: 0,
            orders: HashMap::from([(
                order_uid,
                vec![domain::fee::Policy::Surplus {
                    factor: 0.5f64.try_into().unwrap(),
                    max_volume_factor: 0.01.try_into().unwrap(),
                }],
            )]),
        };
        let trade = super::trade::Trade::new(transaction.trades[0].clone(), &auction, 0);

        assert_eq!(
            trade.surplus_in_ether(&auction.prices).unwrap().0,
            eth::U256::from(384509480572312u128)
        );

        assert_eq!(
            trade.score(&auction).unwrap().0,
            eth::U256::from(769018961144624u128) // 2 x surplus
        );
    }

    // https://etherscan.io/tx/0x24ea2ea3d70db3e864935008d14170389bda124c786ca90dfb745278db9d24ee
    #[test]
    fn settlement_with_cow_amm() {
        let calldata = hex!(
            "
        13d79a0b
        0000000000000000000000000000000000000000000000000000000000000080
        0000000000000000000000000000000000000000000000000000000000000120
        00000000000000000000000000000000000000000000000000000000000001c0
        0000000000000000000000000000000000000000000000000000000000000520
        0000000000000000000000000000000000000000000000000000000000000004
        000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48
        000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
        000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
        000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48
        0000000000000000000000000000000000000000000000000000000000000004
        000000000000000000000000000000000000000000000000019a3146915f155e
        000000000000000000000000000000000000000000000000000000001270a05f
        000000000000000000000000000000000000000000000000000000001270a05f
        000000000000000000000000000000000000000000000000019b4a78844e21f2
        0000000000000000000000000000000000000000000000000000000000000001
        0000000000000000000000000000000000000000000000000000000000000020
        0000000000000000000000000000000000000000000000000000000000000002
        0000000000000000000000000000000000000000000000000000000000000003
        0000000000000000000000000000000000000000000000000000000000000000
        000000000000000000000000000000000000000000000000019b4a78844e21f2
        00000000000000000000000000000000000000000000000000000000126f1d1f
        0000000000000000000000000000000000000000000000000000000066c84917
        362e5182440b52aa8fffe70a251550fbbcbca424740fe5a14f59bf0c1b06fe1d
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000042
        000000000000000000000000000000000000000000000000019b4a78844e21f2
        0000000000000000000000000000000000000000000000000000000000000160
        0000000000000000000000000000000000000000000000000000000000000194
        f08d4dea369c456d26a3168ff0024b904f2d8b91000000000000000000000000
        c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000
        a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        000000000000000000000000019b4a78844e21f2000000000000000000000000
        00000000000000000000000000000000126f1d1f000000000000000000000000
        0000000000000000000000000000000066c84917362e5182440b52aa8fffe70a
        251550fbbcbca424740fe5a14f59bf0c1b06fe1d000000000000000000000000
        0000000000000000000000000000000000000000f3b277728b3fee749481eb3e
        0b3b48980dbbab78658fc419025cb16eee346775000000000000000000000000
        00000000000000000000000000000000000000015a28e9363bb942b639270062
        aa6bb295f434bcdfc42c97267bf003f272060dc95a28e9363bb942b639270062
        aa6bb295f434bcdfc42c97267bf003f272060dc9000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000160
        0000000000000000000000000000000000000000000000000000000000000740
        0000000000000000000000000000000000000000000000000000000000000001
        0000000000000000000000000000000000000000000000000000000000000020
        000000000000000000000000f08d4dea369c456d26a3168ff0024b904f2d8b91
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000024
        f14fcbc8bfb27bd6d0a9e23c8bbc1cc85596e1c0639265a3c0b46a72f850529d
        17bc1b5b00000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000001
        0000000000000000000000000000000000000000000000000000000000000020
        0000000000000000000000009c05bdcc909c2b190837e8fe71619cf389598c2c
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000504
        3732900900000000000000000000000000000000000000000000000000000000
        0000002000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        00000000000000000000000000000000000000000000000000000000019b4a78
        844e21f200000000000000000000000000000000000000000000000000000000
        1270a05f00000000000000000000000000000000000000000000000000000000
        66c848250000000000000000000000009008d19f58aabd9ed0d60971565aa851
        0560ab41000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce
        3606eb4800000000000000000000000000000000000000000000000000000000
        0000010000000000000000000000000000000000000000000000000000000000
        0000008000000000000000000000000000000000000000000000000000000000
        0000036000000000000000000000000000000000000000000000000000000000
        0000038000000000000000000000000000000000000000000000000000000000
        000003a000000000000000000000000000000000000000000000000000000000
        000002c0000000000000000000000000000000000000000000000000019b4a78
        844e21f20000000000000000000000000000000000004b905f8f54ec051e2802
        2bde09620000000000000000000000000000000000004b905f8f54ec051e2802
        2bde09620000000000000000000000000000000000004b8f0f47c8c28d464eaa
        a8087e530000000000000000000000009008d19f58aabd9ed0d60971565aa851
        0560ab410000000000000000000000009008d19f58aabd9ed0d60971565aa851
        0560ab4100000000000000000000000000000000000000000000000000000000
        66c847e500000000000000000000000000000000000000000000000000000000
        0000004000000000000000000000000000000000000000000000000000000000
        0000000a00000000000000000000000000000000000000000000000000000000
        0000006400000000000000000000000000000000000000000000000000000000
        000001f400000000000000000000000000000000000000000000000000000000
        0000000a00000000000000000000000000000000000000000000000000000000
        0000006400000000000000000000000000000000000000000000000000000000
        000001f400000000000000000000000000000000000000000000000000000000
        0000001900000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        0000024000000000000000000000000000000000000000000000000000000000
        00000041abcdb567a3168a149e106f95473e0605b44540005c64336deb7a17e8
        3d7275616e37d90b0431a7fe719c619db5103bab6054a120bd6b9e20d78a3b70
        6a76d2841b000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        0000000131000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        00000000008dd870"
        )
        .to_vec();

        let domain_separator = eth::DomainSeparator(hex!(
            "c078f884a2676e1345748b1feace7b0abee5d00ecadb6e574dcdd109a63e8943"
        ));
        let transaction = super::transaction::Transaction::new(
            &domain::eth::Transaction {
                input: calldata.into(),
                ..Default::default()
            },
            &domain_separator,
        )
        .unwrap();

        let prices: auction::Prices = From::from([
            (
                eth::TokenAddress(eth::H160::from_slice(&hex!(
                    "a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                ))),
                auction::Price::try_new(eth::U256::from(374263465721452989998170112u128).into())
                    .unwrap(),
            ),
            (
                eth::TokenAddress(eth::H160::from_slice(&hex!(
                    "c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                ))),
                auction::Price::try_new(eth::U256::from(1000000000000000000u128).into()).unwrap(),
            ),
        ]);

        let auction = super::Auction {
            block: eth::BlockNo(0),
            prices,
            surplus_capturing_jit_order_owners: HashSet::from([eth::Address(
                eth::H160::from_slice(&hex!("f08d4dea369c456d26a3168ff0024b904f2d8b91")),
            )]),
            id: 0,
            orders: Default::default(),
        };
        let trade = super::trade::Trade::new(transaction.trades[0].clone(), &auction, 0);
        println!("{}", trade.uid().owner());
        assert_eq!(
            trade.surplus_in_ether(&auction.prices).unwrap().0,
            eth::U256::from(37102982937761u128)
        );
    }

    // https://etherscan.io/tx/0x0ee0a609c54cb006d024a4d009db8751730c064b26524379793144c07c3575b3
    // A special case where the user order and a liquidity order trade the common
    // token, where liquidity order is supposed to be executed at its limit price
    // and without fees.
    #[test]
    fn settlement_with_liquidity_order_and_user_order() {
        let calldata = hex!(
            "
        13d79a0b
        0000000000000000000000000000000000000000000000000000000000000080
        0000000000000000000000000000000000000000000000000000000000000160
        0000000000000000000000000000000000000000000000000000000000000240
        00000000000000000000000000000000000000000000000000000000000008e0
        0000000000000000000000000000000000000000000000000000000000000006
        000000000000000000000000812ba41e071c7b7fa4ebcfb62df5f45f6fa853ee
        000000000000000000000000a21af1050f7b26e0cff45ee51548254c41ed6b5c
        000000000000000000000000a21af1050f7b26e0cff45ee51548254c41ed6b5c
        000000000000000000000000812ba41e071c7b7fa4ebcfb62df5f45f6fa853ee
        000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
        000000000000000000000000a21af1050f7b26e0cff45ee51548254c41ed6b5c
        0000000000000000000000000000000000000000000000000000000000000006
        0000000000000000000000000000000000000000009d252036621245bccfee44
        00000000000000000000000000000000000000000000000000006dd9404a1acb
        00000000000000000000000000000000000000000000000000006dd9404a1acb
        000000000000000000000000000000000000000000ab3e6cee134b96efa57fd8
        000000000000000000000000000000000000000000ab3e6cee134b96efa57fd8
        00000000000000000000000000000000000000000000000000bb8c2a13aae7f2
        0000000000000000000000000000000000000000000000000000000000000002
        0000000000000000000000000000000000000000000000000000000000000040
        0000000000000000000000000000000000000000000000000000000000000360
        0000000000000000000000000000000000000000000000000000000000000002
        0000000000000000000000000000000000000000000000000000000000000003
        0000000000000000000000000000000000000000000000000000000000000000
        000000000000000000000000000000000000000000ab3e6cee134b96efa57fd8
        000000000000000000000000000000000000000000000000000039dab59ed3a0
        0000000000000000000000000000000000000000000000000000000066f9d607
        362e5182440b52aa8fffe70a251550fbbcbca424740fe5a14f59bf0c1b06fe1d
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000042
        000000000000000000000000000000000000000000ab3e6cee134b96efa57fd8
        0000000000000000000000000000000000000000000000000000000000000160
        0000000000000000000000000000000000000000000000000000000000000194
        b3d37552eebbbdbea36258ba0948f4bbcaa3584e000000000000000000000000
        a21af1050f7b26e0cff45ee51548254c41ed6b5c000000000000000000000000
        812ba41e071c7b7fa4ebcfb62df5f45f6fa853ee000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        000000000000000000ab3e6cee134b96efa57fd8000000000000000000000000
        000000000000000000000000000039dab59ed3a0000000000000000000000000
        0000000000000000000000000000000066f9d607362e5182440b52aa8fffe70a
        251550fbbcbca424740fe5a14f59bf0c1b06fe1d000000000000000000000000
        0000000000000000000000000000000000000000f3b277728b3fee749481eb3e
        0b3b48980dbbab78658fc419025cb16eee346775000000000000000000000000
        00000000000000000000000000000000000000015a28e9363bb942b639270062
        aa6bb295f434bcdfc42c97267bf003f272060dc95a28e9363bb942b639270062
        aa6bb295f434bcdfc42c97267bf003f272060dc9000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000004
        0000000000000000000000000000000000000000000000000000000000000005
        0000000000000000000000000000000000000000000000000000000000000000
        00000000000000000000000000000000000000000000000000bb8c2a13aae7f2
        000000000000000000000000000000000000000000ab3e6cee134b96efa57fd8
        0000000000000000000000000000000000000000000000000000000066f9d54a
        362e5182440b52aa8fffe70a251550fbbcbca424740fe5a14f59bf0c1b06fe1d
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000040
        00000000000000000000000000000000000000000000000000bb8c2a13aae7f2
        0000000000000000000000000000000000000000000000000000000000000160
        0000000000000000000000000000000000000000000000000000000000000194
        477a8982515e3a3d3aa6447b019b7c647e4162f8000000000000000000000000
        c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000
        a21af1050f7b26e0cff45ee51548254c41ed6b5c000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        00000000000000000000000000bb8c2a13aae7f2000000000000000000000000
        000000000000000000ab3e6cee134b96efa57fd8000000000000000000000000
        0000000000000000000000000000000066f9d54a362e5182440b52aa8fffe70a
        251550fbbcbca424740fe5a14f59bf0c1b06fe1d000000000000000000000000
        0000000000000000000000000000000000000000f3b277728b3fee749481eb3e
        0b3b48980dbbab78658fc419025cb16eee346775000000000000000000000000
        00000000000000000000000000000000000000005a28e9363bb942b639270062
        aa6bb295f434bcdfc42c97267bf003f272060dc95a28e9363bb942b639270062
        aa6bb295f434bcdfc42c97267bf003f272060dc9000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000240
        0000000000000000000000000000000000000000000000000000000000000580
        0000000000000000000000000000000000000000000000000000000000000002
        0000000000000000000000000000000000000000000000000000000000000040
        0000000000000000000000000000000000000000000000000000000000000100
        000000000000000000000000477a8982515e3a3d3aa6447b019b7c647e4162f8
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000024
        f14fcbc87f5c83e02f5be47badc76a48a42cec3e3d78c4f80e8cd189e9596302
        fb57634e00000000000000000000000000000000000000000000000000000000
        000000000000000000000000b3d37552eebbbdbea36258ba0948f4bbcaa3584e
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000024
        f14fcbc8c1cd2e1ebcf050e89c8e3891eae25653f0f829ffec61718d6d1962b2
        20d49ec400000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000001
        0000000000000000000000000000000000000000000000000000000000000020
        000000000000000000000000bbbbbbb520d69a9775e85b458c58c648259fad5f
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000060
        0000000000000000000000000000000000000000000000000000000000000264
        4dcebcba00000000000000000000000000000000000000000000000000000000
        66f9d53e0000000000000000000000009008d19f58aabd9ed0d60971565aa851
        0560ab4100000000000000000000000067336cec42645f55059eff241cb02ea5
        cc52ff8600000000000000000000000000000000000000000000000000000192
        3fe79c05000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead908
        3c756cc2000000000000000000000000812ba41e071c7b7fa4ebcfb62df5f45f
        6fa853ee00000000000000000000000000000000000000000000000000bb8c2a
        13aae7f2000000000000000000000000000000000000000000000000000077b4
        3fe5656d0000000000000000000000009008d19f58aabd9ed0d60971565aa851
        0560ab4100000000000000000000000000000000000000000000000000000000
        00000000cf1d82b73e592a800000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        000001a000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        0000004000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        0000004148974983130d2ad3667c1f71bb5dfaa18a89d2445f1537658e50db86
        0394f4361184d1eaf2187386e318c39691a3e02b1790661c647fa2b619cc67e1
        d244f3191c000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000000000000000000000000000000000000000000000000000000000
        0000000000900f47"
        )
        .to_vec();

        let domain_separator = eth::DomainSeparator(hex!(
            "c078f884a2676e1345748b1feace7b0abee5d00ecadb6e574dcdd109a63e8943"
        ));
        let transaction = super::transaction::Transaction::new(
            &domain::eth::Transaction {
                input: calldata.into(),
                ..Default::default()
            },
            &domain_separator,
        )
        .unwrap();

        let prices: auction::Prices = From::from([
            (
                eth::TokenAddress(eth::H160::from_slice(&hex!(
                    "812Ba41e071C7b7fA4EBcFB62dF5F45f6fA853Ee"
                ))),
                auction::Price::try_new(eth::U256::from(400373909534592401408u128).into()).unwrap(),
            ),
            (
                eth::TokenAddress(eth::H160::from_slice(&hex!(
                    "a21Af1050F7B26e0cfF45ee51548254C41ED6b5c"
                ))),
                auction::Price::try_new(eth::U256::from(127910593u128).into()).unwrap(),
            ),
            (
                eth::TokenAddress(eth::H160::from_slice(&hex!(
                    "c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                ))),
                auction::Price::try_new(eth::U256::from(1000000000000000000u128).into()).unwrap(),
            ),
        ]);

        let auction = super::Auction {
            block: eth::BlockNo(0),
            prices,
            surplus_capturing_jit_order_owners: Default::default(),
            id: 0,
            orders: HashMap::from([(
                transaction.trades[0].uid,
                vec![domain::fee::Policy::Surplus {
                    factor: 0.5f64.try_into().unwrap(),
                    max_volume_factor: 0.01.try_into().unwrap(),
                }],
            )]),
        };
        let jit_trade = super::trade::Trade::new(transaction.trades[1].clone(), &auction, 0);
        assert_eq!(jit_trade.fee_in_ether(&auction.prices).unwrap().0, 0.into());
        assert_eq!(jit_trade.score(&auction).unwrap().0, 0.into());
        assert_eq!(
            jit_trade.fee_breakdown(&auction).unwrap().total.amount.0,
            0.into()
        );
        assert!(jit_trade
            .fee_breakdown(&auction)
            .unwrap()
            .protocol
            .is_empty());
    }
}
