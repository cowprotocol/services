openapi: 3.0.3
info:
  version: 0.0.1
  title: Order Book API
servers:
  - description: Mainnet (Prod)
    url: https://api.cow.fi/mainnet
  - description: Mainnet (Staging)
    url: https://barn.api.cow.fi/mainnet
  - description: Görli (Prod)
    url: https://api.cow.fi/goerli
  - description: Görli (Staging)
    url: https://barn.api.cow.fi/goerli
  - description: Gnosis Chain (Prod)
    url: https://api.cow.fi/xdai
  - description: Gnosis Chain (Staging)
    url: https://barn.api.cow.fi/xdai
  - description: Local
    url: http://localhost:8080
paths:
  /api/v1/orders:
    post:
      summary: Create a new order.
      responses:
        201:
          description: Order has been accepted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UID"
        400:
          description: Error during order validation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderPostError"
        403:
          description: Forbidden, your account is deny-listed
        429:
          description: Too many order placements
        500:
          description: Error adding an order
      requestBody:
        description: The order to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCreation"
    delete:
      summary: Cancels multiple orders by marking them invalid with a timestamp.
      description: |
        This is a best effort cancellation, and might not prevent solvers from
        settling the orders (if the order is part of an in-flight settlement
        transaction for example). Authentication must be provided by an EIP-712
        signature of an "OrderCacellations(bytes[] orderUids)" message.
      requestBody:
        description: "Signed OrderCancellations"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCancellations"
      responses:
        200:
          description: Orders deleted
        400:
          description: Malformed signature
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderCancellationError"
        401:
          description: Invalid signature
        404:
          description: One or more orders were not found and no orders were cancelled.
  /api/v1/orders/{UID}:
    get:
      summary: Get existing order from UID.
      parameters:
        - in: path
          name: UID
          schema:
            $ref: "#/components/schemas/UID"
          required: true
      responses:
        200:
          description: Order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        404:
          description: Order was not found
    delete:
      deprecated: true
      summary: Cancels order by marking it invalid with a timestamp.
      description: |
        The successful deletion might not prevent solvers from settling the order.
        Authentication must be provided by providing an EIP-712 signature of an
        "OrderCacellation(bytes orderUids)" message.
      parameters:
        - in: path
          name: UID
          schema:
            $ref: "#/components/schemas/UID"
          required: true
      requestBody:
        description: "Signed OrderCancellation"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCancellation"
      responses:
        200:
          description: Order deleted
        400:
          description: Malformed signature
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderCancellationError"
        401:
          description: Invalid signature
        404:
          description: Order was not found
    patch:
      summary: Cancels order and replaces it with a new one
      description: |
        Cancel an order by providing a replacement order where the app data field
        is the EIP-712-struct-hash of a cancellation for the original order. This
        allows an old order to be cancelled AND a new order to be created in an
        atomic operation with a single signature. This may be useful for replacing
        orders when on-chain prices move outside of the original order's limit price.
      parameters:
        - in: path
          name: UID
          schema:
            $ref: "#/components/schemas/UID"
          required: true
      requestBody:
        description: "replacement order"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCreation"
      responses:
        201:
          description: Previous order was cancelled and the new replacement order was created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UID"
        400:
          description: Error cancelling and replacing new order with an old one.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplaceOrderError"
        401:
          description: |
            Invalid replacement order. This can happen if the old and new orders have
            different signers, the new order's app data is not an encoded cancellation of
            the old order, or the new order is based on presign or EIP-1271 signatures.
        403:
          description: Forbidden
        404:
          description: Order was not found
  /api/v1/transactions/{txHash}/orders:
    get:
      summary: Get orders by settlement transaction hash.
      parameters:
        - in: path
          name: txHash
          schema:
            $ref: "#/components/schemas/TransactionHash"
          required: true
      responses:
        200:
          description: Order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
  /api/v1/trades:
    get:
      summary: Get existing Trades.
      description: |
        Exactly one of owner or order_uid has to be set.
      parameters:
        - name: owner
          in: query
          schema:
            $ref: "#/components/schemas/Address"
          required: false
        - name: orderUid
          in: query
          schema:
            $ref: "#/components/schemas/UID"
          required: false
      responses:
        200:
          description: all trades
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Trade"
  /api/v1/auction:
    get:
      summary: Gets the current batch auction.
      description: |
        The current batch auction that solvers should be solving right now. Includes the list of
        solvable orders, the block on which the batch was created, as well as prices for all tokens
        being traded (used for objective value computation).
      responses:
        200:
          description: the auction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auction"
  /api/v1/fee:
    get:
      deprecated: true
      description: |
        The fee that is charged for placing an order.
        The fee is described by a minimum fee - in order to cover the gas costs for onchain settling - and
        a feeRatio charged to the users for using the service.
        This is deprecated in favour of '/api/v1/quote'.
      parameters:
        - name: sellToken
          in: query
          schema:
            $ref: "#/components/schemas/Address"
          required: true
        - name: buyToken
          in: query
          schema:
            $ref: "#/components/schemas/Address"
          required: true
        - name: amount
          in: query
          schema:
            $ref: "#/components/schemas/TokenAmount"
          required: true
        - name: kind
          in: query
          schema:
            $ref: "#/components/schemas/OrderType"
          required: true
      responses:
        200:
          description: the fee
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeeInformation"
        400:
          description: Token not supported by the protocol (e.g. token with fee on transfer)
        404:
          description: Token non-existent or not connected to native token
        500:
          description: Unexpected internal error while processing the request
  /api/v1/markets/{baseToken}-{quoteToken}/{kind}/{amount}:
    get:
      deprecated: true
      description: |
        The estimated amount in quote token for either buying or selling `amount` of baseToken.
        This is deprecated in favour of '/api/v1/quote'
      parameters:
        - name: baseToken
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: quoteToken
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: amount
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/TokenAmount"
        - name: kind
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/OrderType"
      responses:
        200:
          description: the price denominated in quote token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AmountEstimate"
        400:
          description: Token not supported by the protocol (e.g. token with fee on transfer)
        404:
          description: Token non-existent or no valid price found
        500:
          description: Unexpected internal error while processing the request
  /api/v1/feeAndQuote/sell:
    get:
      deprecated: true
      description: |
        For a total available amount of sell_token returns the fee in the sell token and the
        resulting buy amount after the fee has been deducted.
        sellAmountBeforeFee is the total amount that is available for the order. From it the fee
        is deducted and the buy amount is calculated.
        This is deprecated in favour of '/api/v1/quote'.
      parameters:
        - name: sellToken
          in: query
          schema:
            $ref: "#/components/schemas/Address"
          required: true
        - name: buyToken
          in: query
          schema:
            $ref: "#/components/schemas/Address"
          required: true
        - name: sellAmountBeforeFee
          in: query
          schema:
            $ref: "#/components/schemas/TokenAmount"
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeeAndQuoteSellResponse"
        400:
          description: Error with the input data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeeAndQuoteError"
        404:
          description: Token non-existent or not connected to native token
        500:
          description: Unexpected internal error while processing the request
  /api/v1/feeAndQuote/buy:
    get:
      deprecated: true
      description: |
        For a target buy amount returns the total sell_amount that is needed and how much of it is
        the fee.
        This is deprecated in favour of '/api/v1/quote'.
      parameters:
        - name: sellToken
          in: query
          schema:
            $ref: "#/components/schemas/Address"
          required: true
        - name: buyToken
          in: query
          schema:
            $ref: "#/components/schemas/Address"
          required: true
        - name: buyAmountAfterFee
          in: query
          schema:
            $ref: "#/components/schemas/TokenAmount"
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeeAndQuoteBuyResponse"
        400:
          description: Error with the input data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeeAndQuoteError"
        404:
          description: Token non-existent or not connected to native token
        500:
          description: Unexpected internal error while processing the request
  /api/v1/account/{owner}/orders:
    get:
      summary: Get orders of one user paginated.
      description: |
        The orders are ordered by their creation date descending (newest orders first).
        To enumerate all orders start with offset 0 and keep increasing the offset by the total
        number of returned results. When a response contains less than the limit the last page has
        been reached.
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: offset
          in: query
          description: |
            The pagination offset. Defaults to 0.
          schema:
            type: integer
          required: false
        - name: limit
          in: query
          description: |
            The pagination limit. Defaults to 10. Maximum 1000. Minimum 1.
          schema:
            type: integer
          required: false
      responses:
        200:
          description: the orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        400:
          description: Problem with parameters like limit being too large.
  /api/v1/token/{token}/native_price:
    get:
      summary: Get native price for the given token.
      description: |
        Price is the exchange rate between the specified token and the network's native currency.
        It represents the amount of native token atoms needed to buy 1 atom of the specified token.
      parameters:
        - name: token
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Address"
      responses:
        200:
          description: the estimated native price
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NativePriceResponse"
        400:
          description: Error finding the price.
        404:
          description: No liquidity was found
        500:
          description: Unexpected error
  /api/v1/quote:
    post:
      summary: Quotes a price and fee for the specified order parameters.
      description: |
        This API endpoint accepts a partial order and computes the minimum fee and
        a price estimate for the order. It returns a full order that can be used
        directly for signing, and with an included signature, passed directly to
        the order creation endpoint.
      requestBody:
        description: The order parameters to compute a quote for.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderQuoteRequest"
      responses:
        200:
          description: Quoted order.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderQuoteResponse"
        400:
          description: Error quoting order.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeeAndQuoteError"
        403:
          description: Forbidden, your account is deny-listed
        429:
          description: Too many order quotes
        500:
          description: Unexpected error quoting an order
  /api/v1/solver_competition/{auction_id}:
    get:
      summary: Information about solver competition
      description: |
        Returns the competition information by auction id.
      parameters:
        - name: auction_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: competition info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolverCompetitionResponse"
        404:
          description: No competition information available for this auction id.
  /api/v1/solver_competition/by_tx_hash/{tx_hash}:
    get:
      summary: Information about solver competition
      description: |
        Returns the competition information by transaction hash.
      parameters:
        - name: tx_hash
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/TransactionHash"
      responses:
        200:
          description: competition info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolverCompetitionResponse"
        404:
          description: No competition information available for this tx hash.
  /api/v1/version:
    get:
      summary: Information about the current deployed version of the API
      description: |
        Returns the git commit hash, branch name and release tag (code: https://github.com/cowprotocol/services).
      responses:
        200:
          description: version info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionResponse"
components:
  schemas:
    TransactionHash:
      description: 32 byte digest encoded as a hex with `0x` prefix.
      example: "0xd51f28edffcaaa76be4a22f6375ad289272c037f3cc072345676e88d92ced8b5"
    Address:
      description: 20 byte Ethereum address encoded as a hex with `0x` prefix.
      type: string
      example: "0x6810e776880c02933d47db1b9fc05908e5386b96"
    AppData:
      description: 32 bytes encoded as hex with `0x` prefix.
      example: "0x0000000000000000000000000000000000000000000000000000000000000000"
    BigUint:
      description: A big unsigned integer encoded in decimal.
      type: string
      example: "1234567890"
    TokenAmount:
      description: Amount of a token. uint256 encoded in decimal.
      type: string
      example: "1234567890"
    OnchainOrderData:
      properties:
        sender:
          description: |
              If orders are placed as onchain orders, the owner of the order might 
              be a smart contract, but not the user placing the order. The 
              actual user will be provided in this field
          $ref: "#/components/schemas/Address"
        placementError:
          description: |
              Describes the error, if the order placement was not 
              successful. This could happen, for example, if the 
              valid_to is too high, or no valid quote was found or generated
          type: string
          enum:
            [
              QuoteNotFound,
              ValidToTooFarInFuture,
              PreValidationError,
              ...,
            ]
      required:
        - sender
    EthflowData:
      description: |
        Provides the additional data for ethflow orders
      type: object
      properties:
        refundTxHash:
          description: |
            Specifies in which transaction the order was refunded. If
            this field is null the order was not yet refunded.
          $ref: "#/components/schemas/TransactionHash"
          nullable: true
        userValidTo:
          description: |
           Describes the valid to of an order ethflow order.
           Note that for ethflow orders, the valid_to encoded in the smart
           contract is max(uint)
          type: integer
      required:
        - refundTxHash
        - userValidTo
    FeeInformation:
      description: |
        Provides the information to calculate the fees.
      type: object
      properties:
        expiration:
          description: |
            Expiration date of the offered fee. Order service might not accept
            the fee after this expiration date. Encoded as ISO 8601 UTC.
          type: string
          example: "2020-12-03T18:35:18.814523Z"
        amount:
          description: Absolute amount of fee charged per order in specified sellToken
          $ref: "#/components/schemas/TokenAmount"
      required:
        - expiration
        - amount
    OrderType:
      description: Is this a buy order or sell order?
      type: string
      enum: [buy, sell]
    SellTokenSource:
      description: Where should the sell token be drawn from?
      type: string
      enum: [erc20, internal, external]
    BuyTokenDestination:
      description: Where should the buy token be transfered to?
      type: string
      enum: [erc20, internal]
    PriceQuality:
      description: |
        How good should the price estimate be?
        Note that orders are supposed to be created from "optimal" price estimates.
      type: string
      enum: [fast, optimal]
    OrderStatus:
      description: The current order status
      type: string
      enum: [presignaturePending, open, fulfilled, cancelled, expired]
    OrderParameters:
      description: Order parameters.
      type: object
      properties:
        sellToken:
          description: "ERC20 token to be sold"
          $ref: "#/components/schemas/Address"
        buyToken:
          description: "ERC20 token to be bought"
          $ref: "#/components/schemas/Address"
        receiver:
          description: |
            An optional address to receive the proceeds of the trade instead of the
            owner (i.e. the order signer).
          $ref: "#/components/schemas/Address"
          nullable: true
        sellAmount:
          description: "Amount of sellToken to be sold in atoms"
          $ref: "#/components/schemas/TokenAmount"
        buyAmount:
          description: "Amount of buyToken to be bought in atoms"
          $ref: "#/components/schemas/TokenAmount"
        validTo:
          description: Unix timestamp until the order is valid. uint32.
          type: integer
        appData:
          description: |
            Arbitrary application specific data that can be added to an order. This can
            also be used to ensure uniqueness between two orders with otherwise the
            exact same parameters.
          $ref: "#/components/schemas/AppData"
        feeAmount:
          description: "Fees: feeRatio * sellAmount + minimal_fee in atoms"
          $ref: "#/components/schemas/TokenAmount"
        kind:
          description: "The kind is either a buy or sell order"
          $ref: "#/components/schemas/OrderType"
        partiallyFillable:
          description: Is this a fill-or-kill order or a partially fillable order?
          type: boolean
        sellTokenBalance:
          $ref: "#/components/schemas/SellTokenSource"
          default: "erc20"
        buyTokenBalance:
          $ref: "#/components/schemas/BuyTokenDestination"
          default: "erc20"
        signingScheme:
          $ref: "#/components/schemas/SigningScheme"
          default: "eip712"
      required:
        - sellToken
        - buyToken
        - sellAmount
        - buyAmount
        - validTo
        - appData
        - feeAmount
        - kind
        - partiallyFillable
    OrderCreation:
      description: Data a user provides when creating a new order.
      allOf:
        - $ref: "#/components/schemas/OrderParameters"
        - type: object
          properties:
            signingScheme:
              $ref: "#/components/schemas/SigningScheme"
            signature:
              $ref: "#/components/schemas/Signature"
            from:
              description: |
                If set, the backend enforces that this address matches what is decoded as the signer of
                the signature. This helps catch errors with invalid signature encodings as the backend
                might otherwise silently work with an unexpected address that for example does not have
                any balance.
              $ref: "#/components/schemas/Address"
              nullable: true
            quoteId:
              description: |
                Orders can optionally include a quote ID. This way the order can be linked to a quote
                and enable providing more metadata when analyzing order slippage.
              type: integer
              nullable: true
          required:
            - signingScheme
            - signature
    OrderMetaData:
      description: |
        Extra order data that is returned to users when querying orders
        but not provided by users when creating orders.
      type: object
      properties:
        creationTime:
          description: Creation time of the order. Encoded as ISO 8601 UTC.
          type: string
          example: "2020-12-03T18:35:18.814523Z"
        owner:
          $ref: "#/components/schemas/Address"
        UID:
          $ref: "#/components/schemas/UID"
        availableBalance:
          description: "Amount of sellToken available for the settlement contract to spend on behalf of the owner. Null if API was unable to fetch balance or if the order status isn't Open."
          $ref: "#/components/schemas/TokenAmount"
          nullable: true
        executedSellAmount:
          description: "The total amount of sellToken that has been executed for this order including fees."
          $ref: "#/components/schemas/BigUint"
        executedSellAmountBeforeFees:
          description: "The total amount of sellToken that has been executed for this order without fees."
          $ref: "#/components/schemas/BigUint"
        executedBuyAmount:
          description: "The total amount of buyToken that has been executed for this order."
          $ref: "#/components/schemas/BigUint"
        executedFeeAmount:
          description: "The total amount of fees that have been executed for this order."
          $ref: "#/components/schemas/BigUint"
        invalidated:
          description: Has this order been invalidated?
          type: boolean
        status:
          description: Order status
          $ref: "#/components/schemas/OrderStatus"
        fullFeeAmount:
          description: "Amount that the signed fee would be without subsidies"
          $ref: "#/components/schemas/TokenAmount"
        isLiquidityOrder:
          description: |
            Liquidity orders are functionally the same as normal smart contract orders but are not
            placed with the intent of actively getting traded. Instead they facilitate the
            trade of normal orders by allowing them to be matched against liquidity orders which
            uses less gas and can have better prices than external liquidity.
            As such liquidity orders will only be used in order to improve settlement of normal
            orders. They should not be expected to be traded otherwise and should not expect to get
            surplus.
          type: boolean
        ethflowData:
          description: |
            For ethflow orders - order that are placed onchain with native eth -, this field
            contains a struct with two variables user_valid_to and is_refunded
          $ref: "#/components/schemas/EthflowData"
        onchainOrderData:
          description: |
            There is some data only available for orders that are placed onchain. This data
            can be found in this object
          $ref: "#/components/schemas/OnchainOrderData"
        executedSurplusFee:
          description: "Surplus fee that the limit order was executed with."
          $ref: "#/components/schemas/BigUint"
          nullable: true
      required:
        - creationTime
        - owner
        - UID
        - executedSellAmount
        - executedSellAmountBeforeFees
        - executedBuyAmount
        - executedFeeAmount
        - invalidated
    Order:
      allOf:
        - $ref: "#/components/schemas/OrderCreation"
        - $ref: "#/components/schemas/OrderMetaData"
    Auction:
      description: |
        A batch auction for solving.
      type: object
      properties:
        id:
          type: integer
          description: |
            The unique identifier of the auction. Increment whenever the backend creates a new auction.
        block:
          type: integer
          description: |
            The block number for the auction. Orders and prices are guaranteed to be valid on this
            block. Proposed settlements should be valid for this block as well.
        latestSettlementBlock:
          type: integer
          description: |
            The latest block on which a settlement has been processed.

            Note that under certain conditions it is possible for a settlement to have been mined as
            part of `block` but not have yet been processed.
        orders:
          type: array
          items:
            $ref: "#/components/schemas/Order"
          description: |
            The solvable orders included in the auction.
        prices:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/BigUint"
          description: |
            The reference prices for all traded tokens in the auction as a mapping from token
            addresses to a price denominated in native token (i.e. 1e18 represents a token that
            trades one to one with the native token). These prices are used for solution competition
            for computing surplus and converting fees to native token.
    OrderCancellations:
      description: |
        EIP-712 signature of struct OrderCancellations { orderUid: bytes[] } from the order's owner
      type: object
      properties:
        orderUids:
          type: array
          description: "UIDs of orders to cancel"
          items:
            $ref: "#/components/schemas/UID"
        signature:
          description: "OrderCancellation signed by owner"
          $ref: "#/components/schemas/EcdsaSignature"
        signingScheme:
          $ref: "#/components/schemas/EcdsaSigningScheme"
      required:
        - signature
        - signingScheme
    OrderCancellation:
      description: |
        EIP-712 signature of struct OrderCancellation { orderUid: bytes } from the order's owner
      type: object
      properties:
        signature:
          description: "OrderCancellation signed by owner"
          $ref: "#/components/schemas/EcdsaSignature"
        signingScheme:
          $ref: "#/components/schemas/EcdsaSigningScheme"
      required:
        - signature
        - signingScheme
    AmountEstimate:
      description: |
        Provides the information about an estimated price.
      type: object
      properties:
        amount:
          description: The estimated amount
          $ref: "#/components/schemas/TokenAmount"
        token:
          description: "The token in which the amount is given"
          $ref: "#/components/schemas/Address"
    Trade:
      description: |
        Trade data such as executed amounts, fees, order id and block number.
      type: object
      properties:
        blockNumber:
          description: "Block in which trade occurred."
          type: integer
        logIndex:
          description: "Index in which transaction was included in block."
          type: integer
        orderUid:
          description: "Unique ID of the order matched by this trade."
          $ref: "#/components/schemas/UID"
        owner:
          description: "Address of trader."
          $ref: "#/components/schemas/Address"
        sellToken:
          description: "Address of token sold."
          $ref: "#/components/schemas/Address"
        buyToken:
          description: "Address of token bought."
          $ref: "#/components/schemas/Address"
        sellAmount:
          description: "Total amount of sellToken that has been executed for this trade (including fees)."
          $ref: "#/components/schemas/TokenAmount"
        sellAmountBeforeFees:
          description: "The total amount of sellToken that has been executed for this order without fees."
          $ref: "#/components/schemas/BigUint"
        buyAmount:
          description: "Total amount of buyToken received in this trade."
          $ref: "#/components/schemas/TokenAmount"
        transactionHash:
          description: "Hash of the corresponding settlement transaction containing the trade (if available)."
          $ref: "#/components/schemas/TransactionHash"
          nullable: true
      required:
        - blockNumber
        - logIndex
        - orderUid
        - owner
        - sellToken
        - buyToken
        - sellAmount
        - sellAmountBeforeFees
        - buyAmount
        - transactionHash
    UID:
      description: |
        Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix.
        Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address
        and bytes 52..56 valid to,
      type: string
    SigningScheme:
      description: How was the order signed?
      type: string
      enum: [eip712, ethsign, presign, eip1271]
    EcdsaSigningScheme:
      description: How was the order signed?
      type: string
      enum: [eip712, ethsign]
    Signature:
      description: A signature.
      oneOf:
        - $ref: "#/components/schemas/EcdsaSignature"
        - $ref: "#/components/schemas/PreSignature"
    EcdsaSignature:
      description: 65 bytes encoded as hex with `0x` prefix. r + s + v from the spec.
      type: string
      example: "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    PreSignature:
      description: Empty signature bytes. Used for "presign" signatures.
      type: string
      example: "0x"
    OrderPostError:
      type: object
      properties:
        errorType:
          type: string
          enum:
            [
              DuplicateOrder,
              InsufficientFee,
              InsufficientAllowance,
              InsufficientBalance,
              InsufficientValidTo,
              ExcessiveValidTo,
              InvalidSignature,
              TransferEthToContract,
              TransferSimulationFailed,
              UnsupportedToken,
              WrongOwner,
              MissingFrom,
              SameBuyAndSellToken,
              ZeroAmount,
              UnsupportedBuyTokenDestination,
              UnsupportedSellTokenSource,
              UnsupportedOrderType,
              UnsupportedSignature,
              TooManyLimitOrders,
            ]
        description:
          type: string
      required:
        - errorType
        - description
    OrderCancellationError:
      type: object
      properties:
        errorType:
          type: string
          enum:
            [
              InvalidSignature,
              WrongOwner,
              OrderNotFound,
              AlreadyCancelled,
              OrderFullyExecuted,
              OrderExpired,
              OnChainOrder,
            ]
        description:
          type: string
      required:
        - errorType
        - description
    ReplaceOrderError:
      type: object
      properties:
        errorType:
          type: string
          enum:
            [
              AlreadyCancelled,
              OrderFullyExecuted,
              OrderExpired,
              OnChainOrder,
              DuplicateOrder,
              InsufficientFee,
              InsufficientAllowance,
              InsufficientBalance,
              InsufficientValidTo,
              ExcessiveValidTo,
              InvalidSignature,
              TransferEthToContract,
              TransferSimulationFailed,
              UnsupportedToken,
              WrongOwner,
              SameBuyAndSellToken,
              ZeroAmount,
              UnsupportedBuyTokenDestination,
              UnsupportedSellTokenSource,
              UnsupportedOrderType,
              UnsupportedSignature,
            ]
        description:
          type: string
      required:
        - errorType
        - description
    FeeAndQuoteSellResponse:
      type: object
      properties:
        fee:
          $ref: "#/components/schemas/FeeInformation"
        buyAmountAfterFee:
          description: The buy amount after deducting the fee.
          $ref: "#/components/schemas/TokenAmount"
    FeeAndQuoteBuyResponse:
      type: object
      properties:
        fee:
          $ref: "#/components/schemas/FeeInformation"
        sellAmountBeforeFee:
          description: The sell amount including the fee.
          $ref: "#/components/schemas/TokenAmount"
    FeeAndQuoteError:
      type: object
      properties:
        errorType:
          type: string
          enum:
            [
              "NoLiquidity",
              "UnsupportedToken",
              "AmountIsZero",
              "SellAmountDoesNotCoverFee",
            ]
        description:
          type: string
      required:
        - errorType
        - description
    OrderQuoteSide:
      description: The buy or sell side when quoting an order.
      oneOf:
        - type: object
          description: Quote a sell order given the final total sell amount including fees
          properties:
            kind:
              type: string
              enum: [sell]
            sellAmountBeforeFee:
              description: |
                The total amount that is available for the order. From this value, the fee
                is deducted and the buy amount is calculated.
              $ref: "#/components/schemas/TokenAmount"
          required:
            - kind
            - sellAmountBeforeFee
        - type: object
          description: Quote a sell order given the sell amount.
          properties:
            kind:
              type: string
              enum: [sell]
            sellAmountAfterFee:
              description: The sell amount for the order.
              $ref: "#/components/schemas/TokenAmount"
          required:
            - kind
            - sellAmountAfterFee
        - type: object
          description: Quote a buy order given an exact buy amount.
          properties:
            kind:
              type: string
              enum: [buy]
            buyAmountAfterFee:
              description: The buy amount for the order.
              $ref: "#/components/schemas/TokenAmount"
          required:
            - kind
            - buyAmountAfterFee
    OrderQuoteValidity:
      description: The validity for the order
      oneOf:
        - type: object
          description: Absolute validity
          properties:
            validTo:
              description: Unix timestamp until the order is valid. uint32.
              type: integer
        - type: object
          description: Relative validity
          properties:
            validFor:
              description: Number of seconds that the order should be valid for. uint32.
              type: integer
    OrderQuoteRequest:
      description: Request fee and price quote.
      allOf:
        - $ref: "#/components/schemas/OrderQuoteSide"
        - $ref: "#/components/schemas/OrderQuoteValidity"
        - type: object
          properties:
            sellToken:
              description: "ERC20 token to be sold"
              $ref: "#/components/schemas/Address"
            buyToken:
              description: "ERC20 token to be bought"
              $ref: "#/components/schemas/Address"
            receiver:
              description: |
                An optional address to receive the proceeds of the trade instead of the
                owner (i.e. the order signer).
              $ref: "#/components/schemas/Address"
              nullable: true
            appData:
              description: |
                Arbitrary application specific data that can be added to an order. This can
                also be used to ensure uniqueness between two orders with otherwise the
                exact same parameters.
              $ref: "#/components/schemas/AppData"
            partiallyFillable:
              description: Is this a fill-or-kill order or a partially fillable order?
              type: boolean
            sellTokenBalance:
              $ref: "#/components/schemas/SellTokenSource"
              default: "erc20"
            buyTokenBalance:
              $ref: "#/components/schemas/BuyTokenDestination"
              default: "erc20"
            from:
              $ref: "#/components/schemas/Address"
            priceQuality:
              $ref: "#/components/schemas/PriceQuality"
              default: "optimal"
            signingScheme:
              $ref: "#/components/schemas/SigningScheme"
              default: "eip712"
            onchainOrder:
              description: "Flag to signal whether the order is intended for onchain order placement. Only valid for non ECDSA-signed orders"
              default: false
          required:
            - sellToken
            - buyToken
            - from
    OrderQuoteResponse:
      description: |
        An order quoted by the back end that can be directly signed and
        submitted to the order creation backend.
      type: object
      properties:
        quote:
          $ref: "#/components/schemas/OrderParameters"
        from:
          $ref: "#/components/schemas/Address"
        expiration:
          description: |
            Expiration date of the offered fee. Order service might not accept
            the fee after this expiration date. Encoded as ISO 8601 UTC.
          type: string
          example: "1985-03-10T18:35:18.814523Z"
        id:
          description: |
            Order ID linked to a quote to enable providing more metadata when analyzing
            order slippage.
          type: integer
    SolverCompetitionResponse:
      description: |
        The settlements submitted by every solver for a specific auction.
        The auction id corresponds to the id external solvers are provided
        with.
      type: object
      properties:
        auctionId:
          type: integer
          description: The id of the auction the competition info is for.
        transactionHash:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/TransactionHash"
          description: The hash of the transaction that the winning solution of this info was submitted in.
        gasPrice:
          type: number
          description: gas price used for ranking solutions
        liquidityCollectedBlock:
          type: integer
        competitionSimulationBlock:
          type: integer
        solutions:
          type: array
          description: Maps from solver name to object describing that solver's settlement.
          items:
            $ref: "#/components/schemas/SolverSettlement"
    SolverSettlement:
      type: object
      properties:
        solver:
          type: string
          description: name of the solver
        objective:
          type: object
          properties:
            total:
              type: number
              description: the total objective value used for ranking solutions
            surplus:
              type: number
            fees:
              type: number
            cost:
              type: number
            gas:
              type: integer
        prices:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/BigUint"
          description: |
            The prices of tokens for settled user orders as passed to the settlement contract.
        orders:
          type: array
          description: the touched orders
          items:
            type: object
            properties:
              id:
                $ref: "#/components/schemas/UID"
              executedAmount:
                $ref: "#/components/schemas/BigUint"
        callData:
          description: hex encoded transaction calldata
          type: string
    VersionResponse:
      description: |
        The version of the codebase that is currently running.
      type: object
      properties:
        branch:
          type: string
          description: the git branch name at the time of build
        commit:
          type: string
          description: the git commit hash at the time of build
        version:
          type: string
          description: the git tagged version (if any) at the time of the build
    NativePriceResponse:
      description: |
        The estimated native price for the token
      type: object
      properties:
        price:
          type: number
          description: the estimated price of the token
