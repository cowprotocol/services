
running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 33 filtered out; finished in 0.00s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 4 filtered out; finished in 0.00s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 66 filtered out; finished in 0.00s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 1 test
2023-03-13T10:13:43.434Z TRACE driver::domain::competition: fetching liquidity
2023-03-13T10:13:43.434Z TRACE driver::domain::competition: solving
2023-03-13T10:13:43.434Z TRACE driver::infra::solver: sending request to solver self.config.endpoint=http://0.0.0.0:33149/ body={"id":"1","tokens":{"0xc5d0a248011e1ee1ec8170aa8a10e04f8090b3aa":{"decimals":null,"symbol":null,"referencePrice":"2","availableBalance":"0","trusted":false},"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee":{"decimals":null,"symbol":null,"referencePrice":"1000000000000000000","availableBalance":"0","trusted":false}},"orders":[{"uid":"0x9a4ffbb75ae36a158ec14e61a1e33e30954c36e392c0a5cd4d112f89cf4d6085d2525c68a663295bbe347b65c87c8e17de936a0affffffff","sellToken":"0xc5d0a248011e1ee1ec8170aa8a10e04f8090b3aa","buyToken":"0xff275bba7420882795d83830bb4d860b34cdf7bd","sellAmount":"500000000000000000","buyAmount":"298950972","feeAmount":"0","kind":"sell","partiallyFillable":false,"class":"market","reward":0.1}],"liquidity":[],"effectiveGasPrice":"238588612","deadline":"2023-04-12T10:13:42.359950009Z"}
2023-03-13T10:13:43.435Z TRACE driver::infra::solver: got response from solver self.config.endpoint=http://0.0.0.0:33149/ res=Err(Response(reqwest::Error { kind: Request, url: Url { scheme: "http", cannot_be_a_base: false, username: "", password: None, host: Some(Ipv4(0.0.0.0)), port: Some(33149), path: "/", query: None, fragment: None }, source: hyper::Error(IncompleteMessage) }))
2023-03-13T10:13:43.435Z  WARN driver::infra::api::routes::solve: error solving auction err=Solver(Http(Response(reqwest::Error { kind: Request, url: Url { scheme: "http", cannot_be_a_base: false, username: "", password: None, host: Some(Ipv4(0.0.0.0)), port: Some(33149), path: "/", query: None, fragment: None }, source: hyper::Error(IncompleteMessage) })))
2023-03-13T10:13:43.435Z DEBUG driver::tests::setup::driver: got a response from /solve status=400 text="{\"kind\":\"SolverFailed\",\"description\":\"Solver engine returned an invalid response\"}"
test tests::cases::buy_eth::test ... FAILED

failures:

---- tests::cases::buy_eth::test stdout ----
thread 'tests::cases::buy_eth::test' panicked at 'assertion failed: `(left == right)`
  left: `Object {"deadline": String("2023-04-12T10:13:42.359950009Z"), "effectiveGasPrice": String("238588612"), "id": String("1"), "liquidity": Array [], "orders": Array [Object {"buyAmount": String("298950972"), "buyToken": String("0xff275bba7420882795d83830bb4d860b34cdf7bd"), "class": String("market"), "feeAmount": String("0"), "kind": String("sell"), "partiallyFillable": Bool(false), "reward": Number(0.1), "sellAmount": String("500000000000000000"), "sellToken": String("0xc5d0a248011e1ee1ec8170aa8a10e04f8090b3aa"), "uid": String("0x9a4ffbb75ae36a158ec14e61a1e33e30954c36e392c0a5cd4d112f89cf4d6085d2525c68a663295bbe347b65c87c8e17de936a0affffffff")}], "tokens": Object {"0xc5d0a248011e1ee1ec8170aa8a10e04f8090b3aa": Object {"availableBalance": String("0"), "decimals": Null, "referencePrice": String("2"), "symbol": Null, "trusted": Bool(false)}, "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee": Object {"availableBalance": String("0"), "decimals": Null, "referencePrice": String("1000000000000000000"), "symbol": Null, "trusted": Bool(false)}}}`,
 right: `Object {"deadline": String("2023-04-12T10:13:42.359950009Z"), "effectiveGasPrice": String("238588612"), "id": String("1"), "liquidity": Array [], "orders": Array [Object {"buyAmount": String("298950972"), "buyToken": String("0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"), "class": String("market"), "feeAmount": String("0"), "kind": String("sell"), "partiallyFillable": Bool(false), "reward": Number(0.1), "sellAmount": String("500000000000000000"), "sellToken": String("0xc5d0a248011e1ee1ec8170aa8a10e04f8090b3aa"), "uid": String("0x9a4ffbb75ae36a158ec14e61a1e33e30954c36e392c0a5cd4d112f89cf4d6085d2525c68a663295bbe347b65c87c8e17de936a0affffffff")}], "tokens": Object {"0xc5d0a248011e1ee1ec8170aa8a10e04f8090b3aa": Object {"availableBalance": String("0"), "decimals": Null, "referencePrice": String("2"), "symbol": Null, "trusted": Bool(false)}, "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee": Object {"availableBalance": String("0"), "decimals": Null, "referencePrice": String("1000000000000000000"), "symbol": Null, "trusted": Bool(false)}}}`: solve request has unexpected body', crates/driver/src/tests/setup/solver.rs:50:21
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
thread 'tests::cases::buy_eth::test' panicked at 'assertion failed: `(left == right)`
  left: `400`,
 right: `200`', crates/driver/src/tests/cases/buy_eth.rs:209:5


failures:
    tests::cases::buy_eth::test

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 12 filtered out; finished in 1.76s

