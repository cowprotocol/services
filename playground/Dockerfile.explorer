# Stage 1: Build the frontend
FROM --platform=linux/amd64 docker.io/node:16-bullseye-slim as node-build
WORKDIR /usr/src/app

# RPC URL args
ARG REACT_APP_NETWORK_URL_1=https://rpc.mevblocker.io
ARG REACT_APP_NETWORK_URL_5=https://ethereum-goerli.publicnode.com
ARG REACT_APP_NETWORK_URL_100=https://gnosis.publicnode.com

# Orderbook URL args
ARG REACT_APP_ORDER_BOOK_URLS='{"1":"https://api.cow.fi/mainnet","100":"https://api.cow.fi/goerli","5":"https://api.cow.fi/xdai"}'

# Install dependencies
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked apt-get update && \
    apt-get install -y git libssl-dev pkg-config git autoconf automake file g++ libtool make nasm libpng-dev optipng


# Clone the repo to the present working directory
RUN git clone https://github.com/cowprotocol/explorer . && \
    git submodule update --init --recursive

# Install npm dependencies
RUN --mount=type=cache,target=/home/node/.yarn YARN_CACHE_FOLDER=/home/node/.yarn yarn install --frozen-lockfile

# Set the environment variable "chain"
ARG chain
ENV chain=$chain

# Set the environment variable "ETH_RPC_URL"
ARG ETH_RPC_URL
ENV ETH_RPC_URL=$ETH_RPC_URL

# Set the environment variables based on "chain" and "ETH_RPC_URL"
ENV REACT_APP_NETWORK_URL_1=$REACT_APP_NETWORK_URL_1
ENV REACT_APP_NETWORK_URL_5=$REACT_APP_NETWORK_URL_5
ENV REACT_APP_NETWORK_URL_100=$REACT_APP_NETWORK_URL_100

# Update the REACT_APP_ORDER_BOOK_URLS based on the "chain" value if "ETH_RPC_URL" is set
RUN if [ -n "$ETH_RPC_URL" ]; then \
        if [ "$chain" = "1" ]; then \
            export REACT_APP_ORDER_BOOK_URLS=$(echo $REACT_APP_ORDER_BOOK_URLS | jq --argjson chain 1 '.[$chain]="http://127.0.0.1:8080"'); \
        elif [ "$chain" = "5" ]; then \
            export REACT_APP_ORDER_BOOK_URLS=$(echo $REACT_APP_ORDER_BOOK_URLS | jq --argjson chain 5 '.[$chain]="http://127.0.0.1:8080"'); \
        elif [ "$chain" = "100" ]; then \
            export REACT_APP_ORDER_BOOK_URLS=$(echo $REACT_APP_ORDER_BOOK_URLS | jq --argjson chain 100 '.[$chain]="http://127.0.0.1:8080"'); \
        fi; \
    fi

# Update REACT_APP_NETWORK_URLs for the specific chain if "ETH_RPC_URL" is set
RUN if [ -n "$ETH_RPC_URL" ]; then \
        case "$chain" in \
            1) export REACT_APP_NETWORK_URL_1=$ETH_RPC_URL;; \
            5) export REACT_APP_NETWORK_URL_5=$ETH_RPC_URL;; \
            100) export REACT_APP_NETWORK_URL_100=$ETH_RPC_URL;; \
        esac; \
    fi

# Build the frontend
RUN APP_ID=1 yarn build

# Stage 2: Copy the frontend to the nginx container
FROM docker.io/nginx:1.21-alpine as frontend
COPY --from=node-build /usr/src/app/dist /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
